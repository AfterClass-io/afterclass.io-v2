// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations 
    //       in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Reviews {
    id                   String         @id @default(uuid())
    body                 String
    tips                 String?
    rating               Int
    reviewedProfessor    Professors?    @relation(fields: [reviewedProfessorId], references: [id])
    reviewedProfessorId  String?        @map("reviewed_professor_id")
    reviewedCourse       Courses        @relation(fields: [reviewedCourseId], references: [id])
    reviewedCourseId     String         @map("reviewed_course_id")
    reviewedUniveristy   Universities   @relation(fields: [reviewedUniversityId], references: [id])
    reviewedUniversityId Int            @map("reviewed_university_id")
    reviewedFaculty      Faculties      @relation(fields: [reviewedFacultyId], references: [id])
    reviewedFacultyId    Int            @map("reviewed_faculty_id")
    reviewer             Users          @relation(fields: [reviewerId], references: [id])
    reviewerId           String         @map("reviewer_id")
    createdAt            DateTime       @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt            DateTime       @updatedAt @map("updated_at") @db.Timestamptz(3)
    votes                ReviewVotes[]
    reviewLabels         ReviewLabels[]

    @@map("reviews")
}

model Users {
    id           String        @id @default(uuid())
    username     String?       @unique
    firstName    String?       @map("first_name")
    lastName     String?       @map("last_name")
    email        String        @unique
    telegramId   String?       @unique @map("telegram_id")
    photoUrl     String?       @map("photo_url")
    isVerified   Boolean       @default(false) @map("is_verified")
    university   Universities  @relation(fields: [universityId], references: [id])
    universityId Int           @map("university_id")
    faculty      Faculties?    @relation(fields: [facultyId], references: [id])
    facultyId    Int?          @map("faculty_id")
    createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt    DateTime      @updatedAt @map("updated_at") @db.Timestamptz(3)
    reviews      Reviews[]
    votes        ReviewVotes[]

    @@map("users")
}

model Universities {
    id         Int                    @id @default(autoincrement())
    name       String
    abbrv      UniversityAbbreviation
    siteUrl    String                 @unique @map("site_url")
    createdAt  DateTime               @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt  DateTime               @updatedAt @map("updated_at") @db.Timestamptz(3)
    reviews    Reviews[] // Refers to reviews for course & professor from this university
    users      Users[]
    courses    Courses[]
    professors Professors[]
    faculties  Faculties[]

    @@map("universities")
}

model Courses {
    id                   String       @id @default(uuid())
    code                 String
    name                 String
    description          String
    creditUnits          Float        @map("credit_units")
    belongToUniversity   Universities @relation(fields: [belongToUniversityId], references: [id])
    belongToUniversityId Int          @map("belong_to_university")
    belongToFaculty      Faculties    @relation(fields: [belongToFacultyId], references: [id])
    belongToFacultyId    Int          @map("belong_to_faculty")
    createdAt            DateTime     @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt            DateTime     @updatedAt @map("updated_at") @db.Timestamptz(3)
    reviews              Reviews[]
    classes              Classes[]

    @@map("courses")
}

model Professors {
    id                   String               @id @default(uuid())
    name                 String
    email                String
    slug                 String               @unique
    photoUrl             String               @map("photo_url")
    profileUrl           String               @map("profile_url")
    belongToUniversity   Universities         @relation(fields: [belongToUniversityId], references: [id])
    belongToUniversityId Int                  @map("belong_to_university")
    belongToFaculties    ProfessorFaculties[]
    reviews              Reviews[]
    classes              Classes[]
    createdAt            DateTime             @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt            DateTime             @updatedAt @map("updated_at") @db.Timestamptz(3)

    @@map("professors")
}

model ProfessorFaculties {
    id          Int        @id @default(autoincrement())
    professor   Professors @relation(fields: [professorId], references: [id])
    professorId String     @map("professor_id")
    faculty     Faculties  @relation(fields: [facultyId], references: [id])
    facultyId   Int        @map("faculty_id")
    createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt   DateTime   @updatedAt @map("updated_at") @db.Timestamptz(3)

    @@map("professor_faculties")
}

model Faculties {
    id                   Int                  @id @default(autoincrement())
    name                 String
    acronym              String
    siteUrl              String               @map("site_url")
    belongToUniversity   Universities         @relation(fields: [belongToUniversityId], references: [id])
    belongToUniversityId Int                  @map("belong_to_university")
    belongToFaculties    ProfessorFaculties[]
    reviews              Reviews[]
    users                Users[]
    courses              Courses[]
    createdAt            DateTime             @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt            DateTime             @updatedAt @map("updated_at") @db.Timestamptz(3)

    @@unique([belongToUniversityId, acronym])
    @@map("faculties")
}

model Classes {
    id          Int        @id @default(autoincrement())
    label       String?
    course      Courses    @relation(fields: [courseId], references: [id])
    courseId    String     @map("course_id")
    professor   Professors @relation(fields: [professorId], references: [id])
    professorId String     @map("professor_id")
    createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt   DateTime   @updatedAt @map("updated_at") @db.Timestamptz(3)

    @@map("classes")
}

model ReviewVotes {
    id        Int      @id @default(autoincrement())
    review    Reviews  @relation(fields: [reviewId], references: [id])
    reviewId  String   @map("review_id")
    voter     Users    @relation(fields: [voterId], references: [id])
    voterId   String   @map("voter_id")
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

    @@map("review_votes")
}

model Labels {
    id           Int             @id @default(autoincrement())
    name         ReviewLabelName
    typeOf       ReviewLabelType @map("type_of")
    reviewLabels ReviewLabels[]
    createdAt    DateTime        @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt    DateTime        @updatedAt @map("updated_at") @db.Timestamptz(3)

    @@map("labels")
}

model ReviewLabels {
    id        Int      @id @default(autoincrement())
    label     Labels   @relation(fields: [labelId], references: [id])
    labelId   Int      @map("label_id")
    review    Reviews  @relation(fields: [reviewId], references: [id])
    reviewId  String   @map("review_id")
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

    @@map("review_labels")
}

enum UniversityAbbreviation {
    SMU
    NUS
    NTU
}

enum ReviewLabelName {
    INTERESTING        @map("interesting")
    PRACTICAL          @map("practical")
    GAINED_NEW_SKILLS  @map("gained new skills")
    ENGAGING           @map("engaging")
    FAIR_GRADING       @map("fair grading")
    EFFECTIVE_TEACHING @map("effective teaching")
}

enum ReviewLabelType {
    COURSE
    PROFESSOR
}
